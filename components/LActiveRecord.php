<?php
/**
 * Created by PhpStorm.
 * User: soulwu
 * Date: 14-4-17
 * Time: PM2:59
 */

abstract class LActiveRecord extends CActiveRecord
{
	protected static $cipherKey = array();

	protected $enableCipher = true;

	//数据库取出原始值
	private $_orgAttributes = array();

	protected function beforeSave()
	{
		$this->encrypt();
		return parent::beforeSave();
	}

	protected function afterSave()
	{
		$this->decrypt();
		parent::afterSave();
	}

	protected function afterFind()
	{
		if (FLAG_ORG_ATTR == 1)
		{
			$this->_orgAttributes = $this->getAttributes();
		}
		$this->decrypt();
		parent::afterFind();
	}

	protected function encrypt()
	{
		return $this->processCipher();
	}

	protected function decrypt()
	{
		return $this->processCipher(true);
	}

	protected function processCipher($decrypt = false)
	{
		if ($this->enableCipher)
		{
			foreach ($this->getAttributes() as $name => $value)
			{
				if ($value)
				{
					if ($decrypt)
					{
						$this->$name = static::decryptAttribute($name, $value);
					}
					else
					{
						$this->$name = static::encryptAttribute($name, $value);
					}
				}
			}
		}
		return true;
	}

	public static function encryptAttribute($name, $plainText)
	{
		$spec = static::getSpec($name);
		if ($spec && $plainText)
		{
			if (function_exists('yj_encrypt'))
			{
				return yj_encrypt($spec, $plainText);
			}
			else
			{
				return LAESHelper::getInstance()->initKey($spec)->encrypt($plainText);
			}
		}
		else
		{
			return $plainText;
		}
	}

	public static function decryptAttribute($name, $cipherText)
	{
		$spec = static::getSpec($name);
		if ($spec && $cipherText)
		{
			if (function_exists('yj_decrypt'))
			{
				return yj_decrypt($spec, $cipherText);
			}
			else
			{
				return LAESHelper::getInstance()->initKey($spec)->decrypt($cipherText);
			}
		}
		else
		{
			return $cipherText;
		}
	}

	protected static function getSpec($attribute)
	{
		if (array_key_exists($attribute, static::$cipherKey))
		{
			return static::$cipherKey[$attribute];
		}
		else
		{
			return '';
		}
	}

	public function updateByPk($pk, $attributes, $condition = '', $params = array())
	{
        if (isset($attributes['lastModTime']))
        {
            unset($attributes['lastModTime']);
        }

		if (FLAG_ORG_ATTR == 0)
		{
			return parent::updateByPk($pk, $attributes, $condition, $params);
		}
		$modifyData = array();
		foreach ($attributes as $attribute => $value)
		{
			if (!isset($this->_orgAttributes[$attribute]) || strval($this->_orgAttributes[$attribute]) !== strval($value))
			{
				$modifyData[$attribute] = $value;
			}
		}

		if (count($modifyData) === 0)
		{
			return 0;//affected 0 row
		}
		else if (count($modifyData) === 1 && isset($modifyData['updateTime']))
		{
			return 0;//affected 0 row
		}

		$result = parent::updateByPk($pk, $modifyData, $condition, $params);

		$this->_orgAttributes = $this->attributes;

		return $result;
	}

	public function __sleep()
	{
		$keys = parent::__sleep(); // TODO: Change the autogenerated stub
		if (FLAG_ORG_ATTR == 0) return $keys;
		$retKeys = array();
		foreach ($keys as $key)
		{
			if (strpos($key, '_orgAttributes') === false)
			{
				$retKeys[] = $key;
			}
		}

		return $retKeys;
	}

	public function insertData($modelName, $tryNum = 3)
	{
		if (! $this instanceof $modelName || $tryNum < 1)
		{
			return false;
		}
		$flag = $this->save();
		if (!$flag)
		{
			$log = "";
			foreach ($this->getAttributes() as $key=>$value)
			{
				$log .= " ".$key.'['.$value.']';
			}
			Yii::log("msg[insert $modelName table is error]{$log}", CLogger::LEVEL_TRACE, "common.db.insertData." . __FUNCTION__);
			return self::insertData($this, --$tryNum);
		}
		else
		{
			return $flag;
		}
	}
}